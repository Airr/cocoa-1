/* initialize the symbol table */
void attribute_hidden InitNames()
{
//    /* allocate the symbol table */
//    if (!(R_SymbolTable = (SEXP *) calloc(HSIZE, sizeof(SEXP))))
//        R_Suicide("couldn't allocate memory for symbol table");
    
    /* R_UnboundValue */
    R_UnboundValue = allocSExp(SYMSXP);
    SET_SYMVALUE(R_UnboundValue, R_UnboundValue);
    SET_PRINTNAME(R_UnboundValue, R_NilValue);
    SET_ATTRIB(R_UnboundValue, R_NilValue);
    /* R_MissingArg */
    R_MissingArg = allocSExp(SYMSXP);
    SET_SYMVALUE(R_MissingArg, R_MissingArg);
    SET_PRINTNAME(R_MissingArg, mkChar(""));
    SET_ATTRIB(R_MissingArg, R_NilValue);
    /* R_RestartToken */
    R_RestartToken = allocSExp(SYMSXP);
    SET_SYMVALUE(R_RestartToken, R_RestartToken);
    SET_PRINTNAME(R_RestartToken, mkChar(""));
    SET_ATTRIB(R_RestartToken, R_NilValue);
    /* String constants (CHARSXP values) */
    /* Note: we don't want NA_STRING to be in the CHARSXP cache, so that
     mkChar("NA") is distinct from NA_STRING */
    /* NA_STRING */
    NA_STRING = allocCharsxp(strlen("NA"));
    strcpy(CHAR_RW(NA_STRING), "NA");
    SET_CACHED(NA_STRING);  /* Mark it */
//    R_print.na_string = NA_STRING;
    /* R_BlankString */
    R_BlankString = mkChar("");
//    /* Initialize the symbol Table */
//    for (int i = 0; i < HSIZE; i++) R_SymbolTable[i] = R_NilValue;
//    /* Set up a set of globals so that a symbol table search can be
//     avoided when matching something like dim or dimnames. */
//    SymbolShortcuts();
//    /*  Builtin Functions */
//    for (int i = 0; R_FunTab[i].name; i++) installFunTab(i);
//    
//    R_initialize_bcode();
}

void attribute_hidden FinalizeNames()
{
    freeVector(R_UnboundValue);
    freeVector(R_MissingArg);
    freeVector(R_RestartToken);
    freeVector(NA_STRING);
    freeVector(R_BlankString);
}









I need to use some key functions in R without importing R packages with only R
scripts. I want to use R packages with only C, C++, or Fortran. This means that 
I need to make a tiny version of R without R scripting functionality. rmini 
needs the following features.

1. I need to call C functions in R packages.
2. I want to use dynamic libraries built by R.
3. I need to replace R-export C source code with C-export C source code.

Then, I could simply compile R packages to get dynamic libraries, and could call
C/C++ functions. The remaining R scripts in R packages can be converted to C/C++
functions manually.  

After reading R manuals a little bit, I fathomed R's C function call framework,
which was not purly C code in the C function, but R's internal functions
involved. This would be natural choice of R's C function call framework because 
R needs to know variables that C function created. I learned three features of
R's internals: firstly, R's variable of type SEXP and others are internally 
encoded so that R can decode variables (R has no typed variable; any variable 
can be integer, real, characters, and others), secondly variables for R inside 
C functions are manipulated by R's internal functions (especially memory
allocation, and others related R's internal functions), and thirdly a few 
different version of C function calls in R's internal such as .C, .Call, 
.External, and .External2. 

We need to test basic functions in R's internal in order to wisely use them. 
Before embarking on this taks, we need to know about dynamic library in Mac OSX 
and Linux.


Mac Dynamic Library Programming
-------------------------------
Functions: dlopen, dlsym, dladdr, dlclose, and dlerror

R's memory management
---------------------
How are the memory of SEXP managed in R? I need to figure this out.
Where is Rf_allocVector?
Where is Rf_allocArray?
Where is Rf_allocSExp?
  We have those above ones without Rf_ in src/main/memory.c.
What is SEXPTYPE?
  It is enum in src/include/Rinternal.h.

Other slides:
http://www.slideshare.net/userprimary/native-interfaces

R's error message
-----------------
http://stackoverflow.com/questions/1056411/how-to-pass-variable-number-of-arguments-to-printf-sprintf

To print a list of symbols exported from a dynamic library
----------------------------------------------------------
nm -g your.dylib

ksmooth
-------
Let's implement ksmooth using R's internal.

SEXP ksmooth(SEXP x, SEXP y, SEXP xp, SEXP skrn, SEXP sbw)

Web
---
http://stackoverflow.com/questions/7032617/storing-c-objects-in-r

Memory allocation functions
---------------------------
allocSExp
allocVector
