# WHERE I STAND
At this point, Feb 29 2014, I failed to make a point of using CAS in DSK's method. It is not easy, but I'd have to move on. Before moving on, I will finalize the project.

# Let's use alder-kmer in denovo assembly, this may be a slow solution, but I can change the code at my disposal.

# TODO

Use a single .tbl format for both dsk and topkmer mode.

Streamline the code using version 8.
Use versions 7 and 8.
Count overflow check, and prevent overflow in counting or max count should be max.

Chain-based hash table - NOT YET

# Chain-based and open-addressing hash tables

1.chain-based hash table
  - main array: each element is the root of a chain, and some of the elements
                can be an non-root item
  - aux array: each element is an non-root item in a chain
  1.1 single-threaded 
  1.2 multi-threaded
  Field: ID, key, value/timestamp, prev/next, left/right

2. open-addressing hash table  
  2.1. only single-threaded
  Field: ID, key, value/offset, left, right, timestamp

# Introduction
1. I will introduce a method for counting k-mer with arbitrary size of k by
using space-saving algorithm.

# Limitation
1. Multi-threaded implementation

# History of versions

The first three versions are not of use any more, and they are retired. Instead, I've replaced version 3 with another one, which could have been version 7.

Ver8. Space-saving algorithm
thread8

Ver7. Back to sequential reads
binary3
encoder7 (~encoder5)
thread7 (~thread4)

Ver2. 
binary2 (~binary3 single bin), encode2 (~encode5 use lseek), thread2 (~thread4 use lseek and single table)
encode2, thread2 :  I might consider alternative file representations for the input, such using asynchronous I/O and read from multiple points in the file in parallel.
binary2 (just modify binary3)
encode2 = separate infile (~encode3), writing one parfile (~encode5), but read from multiple points in a binfile I wll start from encode5 and get some part of codes from encode3.
thread2 = separate parfile (~thread3), writing one table (~thread3), but read from multiple points in a parfile.

Ver3. Split the binary file, partition files, and runs with multiple threads.
alder_kmer_encode5 -> alder_kmer_encode3
alder_kmer_count_iteration4 -> alder_kmer_count_iteration3
binary3, encode3, thread3

Ver4. Fixed-size input and output buffers.
encode4, thread4
Limited memmory, and enough disk space, single iteration

Ver5. Compressed sequence files or using .bin files.
binary2, encode5, thread4
Limited memory, and limited disk space, multiple iterations

Ver6. Load a whole data in memory and keeping counting 
binary5, thread5
Enough memory, and disk space does not matter as long as a resulting table can fit to the disk space

Use inspect to determine which version can be used.

# To change the command line options.
See alder_kmer_option.c and alder-kmer.ggo.

# To change the behavior of the program depending on command line options.
Use options in main.c.

# Useful web sites
Maximum number of open filehandles per process on OSX
http://stackoverflow.com/questions/5377450/maximum-number-of-open-filehandles-per-process-on-osx-and-how-to-increase

Encoding and decoding kmers by using C union:
http://mbed.org/questions/1277/Union-of-a-uint64_t-and-uint8_t8-array-g/

Measure time of execution:
http://www.harvestsoft.net/measure.htm

Faster division:
http://libdivide.com/documentation.html

# Features

Faster processing with less memory.

1. U Hash Table for overflow, and reduce the size of value type 
   to 1 or 2 bytes, or even variable size.

# Uses
gzip for compression
CAS instruction
Constant memory and hard dirve usage
Binary matrix multiplication - Am for f(m) the hash function.
Random invertible matrix multiplication
memory, cpu, hard drive stats.

# GCC function for CAS
http://gcc.gnu.org/onlinedocs/gcc-4.3.5/gcc/Atomic-Builtins.html#Atomic-Builtins

# Unix command
To count A,C,G,T in a file
grep -o . a-00.seq | sort | uniq -ic

# Create Help Book in mac
1. Edit files in alderg-kmerHelp.
2. Rename it by appending .help extension.
3. Delete help book cache.
$ rm -rf /Users/goshng/Library/Caches/com.apple.helpd
4. Open Help Indexer.
5. Load alderg-kmerHelp.help/Contents/Resources/en.lproj, and create the index.
6. Add the help book to Supporting Files in alderg-kmer project.
