package "alder-kmer"
version "0.1"
purpose "alder-kmer counts kmers in a data set of FASTQ and FASTA sequence files."
usage "alder-kmer [command] [OPTIONS]... [FILES]..."
description
"alder-kmer counts kmers exactly using DSK algorithm (Rizk et al. 2013) or approximately using a space-saving algorithm. It allows arbitrary size of kmers. The first argument of the alder-kmer is a command, which is one of the following strings: `count', `dump', `query', `simulate', `partition', `kmer', `table', `list', `match', `binary', `uncompress', `inspect', and `example'. Use option --help to see more options for each command; e.g., alder-kmer count --help. Options may require arguments. `INT' is a positive number unless stated otherwise. `STRING' is a string of characters. `FILENAME' and `DIRECTORY' are strings that could be found or created in the file system that you run alder-kmer on."

option "help" h "Print help of the program, or a command: e.g., alder-kmer count -h" flag off
option "detailed-help" - "Print help, including all details" flag off
option "full-help" - "Print help with documents" flag off

section "count"
sectiondesc="This command takes sequence files (FASTA, or FASTQ) to count kmers to create a TAB file. Use command `example' for details of file formats. This command runs on either topkmer-mode (default) or dsk-mode. Use option --dsk to turn on dsk-mode. See section COUNT by using command `example'."
option "count" - "Count k-mer data" flag off
option "kmer" k "k-mer size (same: -m/--mer-len)" long typestr="INT" default="1" optional
option "disk" - "maximum disk space" long typestr="N MB" default="10" optional
option "load-disk" - "fraction of disk" double typestr="0 < x < 1" default="1.0" optional
option "memory" - "maximum memory" long typestr="N MB" default="10" optional
option "load-memory" - "fraction of memory" double typestr="0 < x < 1" default="1.0" optional
option "nthread" t "number of threads" long typestr="INT>=1" default="1" optional
option "outfile" o "prefix of output files" string typestr="STRING" default="outfile" optional
option "outdir" - "output directory" string typestr="DIRECTORY" default="." optional

option "nh" - "number of hash elements" long typestr="INT" default="0" optional
option "no-partition" - "Skip partitioning sequence files." flag off
option "no-count" - "Skip counting." flag off
option "no-delete" - "Do not delete partition files; on with --no-count" flag off

section "dump"
sectiondesc="This command takes a table file to report kmers and their occurences. Use command `count' to create a table input file. It prints k-mer sequence, its reverse complementary sequence (--with-reverse), the number of occurences, and the index of the sequence (--with-index) for each kmer."
option "report" - "Report the count table" flag off
option "summary" - "Display only summary of the table" flag off
option "fasta" - "kmers listted in fasta format" flag off
option "no-tab" - "Space separator" flag off

section "query"
sectiondesc="This command takes a sequence (--sequence) or a set of sequences in FASTA files or STDIN as input to search a count table (--tabfile) for them."
option "query" - "dummy" flag off
option "sequence" - "Query a kmer DNA sequence" string typestr="sequence" optional

section "simulate"
sectiondesc="This command creates a sequence data set of FASTQ or FASTA files for testing alder-kmer. It runs with two modes. The two modes of simulation are for testing exact counting and approximate counting. By default, it creates sequence data with exact number of kmers. Use option --error-rate with positive numbers ranging from 1 to 100 to simulate data in the approximate counting mode."
option "simulate" - "Simulate k-mer data" flag off
option "maxkmer" - "number of kmers in a file" long typestr="INT < 10^8" default="1000" optional
option "format" - "sequence file format" string typestr="STRING" default="fastq" values="fasta","fastq","fa","fq","seq" enum optional
option "ni" - "number of iterations" long typestr="INT" default="1" optional
option "np" - "number of partitions" long typestr="INT" default="1" optional
option "nf" - "number of sequences files" long typestr="INT" default="1" optional
option "seqlen" - "maximum sequence length" long typestr="INT" default="100" optional
option "seed" - "random seed" long typestr="INT < 10^9" default="-1" optional
details="Enter a positive integer seed (9 digits or less)."

section "partition"
sectiondesc="This command converts a binary file to partition files. Use options --ni and --np to create ni x np partition files. You can use options: --disk and --memory to set automatically --ni and --np, but to use --disk and --memmory you must set --ni=-1 and --np=-1. See the reference by Rizk, et al. (2013) for details using option --cite."
option "partition" - "Create a partition file" flag off dependon="outfile"
option "inbuffer" - "Size of input buffer in log2" long typestr="INT" default="0" optional
option "outbuffer" - "Size of output buffer in log2" long typestr="INT" default="0" optional

section "kmer"
sectiondesc="This command converts a partition file to a kmer sequence file. Because partition files do not have a field of kmer size, set the kmer size to use this command. Use the following commands to convert the decoded kmers to a dumped table.\n$cut -f 1 outfile.dec|sort|uniq -c|awk 'BEGIN{OFS=FS=\" \"} {tmp=$1;$1=$2;$2=tmp;print}' > outfile.2"
option "decode" - "Decode a partition file" flag off dependon="outfile"

section "table"
sectiondesc="This command converts partition files to a table file. Use the following options: --kmer, --nh, --nthread, and provide at least one partition file as an input file. A series of partition files can be used with option --parfile=x; x-a-b.par is a partition file for iteration a and partition b. The table size is estimated by using given partition files."
option "table" - "Partition file" flag off dependon="outfile"

section "list"
sectiondesc="This command lists kmer sequences in a fastq file. Kmer sequences should have the four letters of A, C, G, and T (a, c, g, or t). Any other characters are considered not a valid DNA letter. Invalid characters would end a sequence, and let the command restart a new sequence if there are more DNA letters that follow. Available options include kmer. It does not check the content of a FASTQ file, and may have side-effects if other formats are provided. It reads STDIN or a file. If option --outfile is used, a file with .lst extension is created instead of being sent to STDOUT"
option "list" - "List kmers in a text file. Options: kmer, seqlen" flag off

section "match"
sectiondesc="NOT WORKING or BUGs - This command compares a table file and a set of input files. A set of sequence data can be given as either standard input or input files."
option "match" - "Compare a table file and input sequence data." flag off
option "tabfile" - "a table file name" string typestr="STRING" default="outfile" optional

section "binary"
sectiondesc="This command converts sequence files to a alder-kmer binary file. Use command uncompress to decode a binary file."
option "binary" - "Create a binary file from sequence file." flag off

section "uncompress"
sectiondesc="This command converts alder-kmer binary files to a simple form of sequence file. Without --outfile option, the output goes to STDOUT. With --outfile option, a file with extension of .seq is created. This could be use to compare a binary file from FASTQ files; use\n$ awk 'NR % 4 == 2' file.fq > file.seq\nand compare file.seq and the outfile from uncompress command. Use command-line tool md5 to compare two files because files can be large."
option "uncompress" - "Create a simple form of a sequence file from an alder-kmer binary file." flag off

section "inspect"
sectiondesc="This command inspects the computer that alder-kmer runs on."
option "inspect" - "inspect command" flag off

section "more"
option "cite" - "Print reference papers" optional hidden
option "log" - "Log file using option outfile" string typestr="file" default="outfile.log" optional argoptional
option "progress" - "Display progress" flag off

option "loglevel" - "Log level" long typestr="level" values="0","1","2","3","4","5" default="1" optional dependon="log"

option "progress-to-stderr" - "Display progress number to stdandard error" flag off
option "totalmaxkmer" - "Skip counting maximum number of kmers in data, and use this number" long typestr="INT" default="0" optional
option "select-version" - "Select a version of kmer counting: 0 for automatic selction, 1 for skipping binary file creation (dsk mode with a single iteration), 2 for binary file creation (dsk mode), 3 for loading a whole input data on the memory (msk or memory streaming kmer mode), 4 for splitting a binary file, 5 for distributed reading, 7 for sequential read with CAS encoding, and 8 for space saving algorithm." long typestr="INT" default="8" values="0","1","2","3","4","5","7","8" optional
option "bin-outdir" - "binary file output directory" string typestr="DIRECTORY" default="." optional
option "par-outdir" - "partition files output directory" string typestr="DIRECTORY" default="." optional
option "tab-outdir" - "table file output directory" string typestr="DIRECTORY" default="." optional

option "mer-len" m "k-mer size" long typestr="INT" default="1" optional
option "canonical" C "Count both strand" flag off
option "lower-count" L "minimum count" long typestr="INT" default="1" optional
option "upper-count" U "maximum count" long typestr="INT <= 4294967295" default="65535" optional
option "size" - "hash size" long typestr="INT" default="1" optional
option "threads" - "number of threads" long typestr="INT>=1" default="1" optional
option "output" - "prefix of output files" string typestr="STRING" default="outfile" optional

option "with-reverse" - "Print reverse complementary sequences" flag off
option "with-index" - "Print index values" flag off
option "only-init" - "Do not execute counting, but the initialization" flag off
option "with-parfile" - "Create par files as well as sequence files." flag off
option "min-table-memory" - "min memory of a part table" long typestr="INT" default="100" optional
option "max-table-memory" - "max memory of a part table" long typestr="INT" default="1000" optional
option "nsplit" - "split binary files" long typestr="INT" default="1" optional
option "use-seqfile" - "Use FASTQ or FASTA" flag off
option "binfile" - "prefix of binary files" string typestr="STRING" default="outfile" optional
option "parfile" - "prefix of partition files" string typestr="STRING" default="outfile" optional
option "error-initial" - "number of initial random sets" long typestr="INT" default="1" optional
option "error-rate" - "error rate in per cent" long typestr="INT" default="0" optional
option "error-iteration" - "number of sets with errors" long typestr="INT" default="1" optional
option "error-duplicate" - "max number of sets with the same errors" long typestr="INT" default="1" optional
option "dsk" - "Turn on DSK mode" flag off

section "assess"
sectiondesc="This command assesses errors and accuracy of an approximated count table."
option "assess" - "assess command" flag off

option "release" - "Release mode" flag on

section "exit"
sectiondesc="The alder-kmer exit 0 on success, and >0 if an error occurs. The command `simulate' returns 0 if all of the Kmers occur only once and --nf=1, otherwise >0. If option --nf is set to 2 or more, then the exit status from `simulate' is invalid."
option "exit" - "dummy" flag off

section "examples"
sectiondesc="The alder-kmer can take files of different formats with each command.

*** FILE FORMAT ***

FASTA: See http://en.wikipedia.org/wiki/FASTA_format for the format. Command `simulate' can create fasta-format files.

FASTQ: See http://en.wikipedia.org/wiki/FASTQ_format for the format. Command `simulate' can create fastq-format files.

TAB: The command `count' creates a table file, which contains a list of entries, of which each consists of a kmer, its occurence, and the index. The index value could be used to search the table for a particular kmer. Another command named `table' can create a table file from a partition file.

BIN: A set of input sequence files is converted to a .bin file. A binary file tends to be smaller in size, which allows alder-kmer to read a whole input in each iteration more quickly than read sequence files.

PAR: This is a binary file format for a partition. See Rizk et al. (2013) for details of partitions. A file of the format contains kmer sequences of the same kmer size. Commands `count'. `simulate', and `partition' can create partition files.

DEC: This is a text file format of partition files. It simply prints one kmer per line.

*** COMMANDS ***

Use one of the commands to execute alder-kmer; `count', `query', `dump', and a few more for debugging. When demontrating usages of alder-kmer in the following, the first argument is a command; I omit alder-kmer. For instance, to count kmer of size 1 in file a.fa you can type in the following command:
$ ./alder-kmer simulate > a.fq
$ ./alder-kmer count a.fq
$ ./alder-kmer dump outfile.tbl
T	A	513	89936814
C	G	487	357654460
Instead, we write in this tutorial as follows:
$ simulate > a.fq
$ count a.fq
$ dump outfile.tbl
Prepend the command in this tutorial with `alder-kmer' in your terminal. If you need a test sequence file, then see the following section to learn how to use `simulate' command, which would create sequence files.

*** COUNT ***

This command takes sequence files as input to create a table of kmer counts. It runs on either topkmer-mode or dsk-mode. The default mode is topkmer, which approximately counts most frequent kmers in the data. It can also runs with dsk-mode. This command comes with more than a dozen options. Some of options are only available to one of the two modes. Since topkmer-mode is default, let us explain what options of the mode are. Use --kmer to choose the size of K-mers to count in the input data. Set minimum or maximum counts of kmers by using --lower-count or --upper-count, respectively. This command creates table files; .tbl (TAB) and .tbh (TBH) files. TAB file is redirected to STDOUT unless --outfile is given. Currently, the topkmer-mode is limited upto two threads. By default, the topkmer-mode will use two threads. Change the number of threads using --thread option. It will use as much memory as available. Use --memory to change the size of memory. The more memory available, the more accruate the count of kmers in the topkmer-mode. Use --nh to set the size of a table, which would override the size of avilable memory option. When FASTQ or FASTA sequence files are given to alder-kmer as STDIN, use --format option to let alder-kmer know the format of the STDIN. Currently, multiple format sequence data cannot be given as STDIN.

The dsk-mode in alder-kmer allows users to count kmers exactly. See Rizk et al. 2013 for details of the algorithm. It uses disk space to count kmers. Available disk space would determine the numbers of iterations, and maximum memory would determine the number of partition files given the available disk space. The alder-kmer attempts to compute the available disk space and memory at the time the program runs. You could also specify disk space or available memory. You can also specify directly the number of iterations and partitions --ni and --np, these will override values that otherwise would be determined by disk space and input sequence data; this is not recommended for real data.

To count kmers (K=2) in a sequence file, using option -k, type in:
$ count -k 2 a.fa
This would create an output file named outfile.tbl. Crate 10 fastq files and count kmers in the files by typing in:
$ simulate -k 25 --maxkmer=100000 --nf=10 --progress
$ count -k 25 outfile*.fq

*** DUMP ***

This command takes a table file to create a text file with kmers. By default, kmers are printed to STDOUT unless option --outfile is given. Two columns separated by a tab character are printed out; kmer in DNA characters, and count in numbers. Use option --fasta to print them in FASTA format; >count newline kmer. Kmer sequences are printed in a line. Use --no-tab to separate kmer and count by a space not a tab. You can use option --with-reverse to print the reverse complementary sequence of each kmer; the first column is kmer, the second column is its reverse complementary sequence, and the third column is its number of occurences. In FASTA format output, the reverse complementary sequence is printed just below each kmer sequence. The count hash table contains index values for each kmer. The kmer index in a table can be used to search fast at the expense of more memory space. Use option --with-index to print the index of each kmer at the fourth column. In FASTA format output, the index is printed to the right of the count value separated by a space. Use --lower-count or --upper-count to limit the range of count values in reporting kmer occurences.

This command would only the summary of kmer occurences with option --summary.

To display kmers and their occurences in a created hash table, type in:
$ dump outfile.tbl

*** SIMULATE ***

This command creates FASTQ files for testing alder-kmer. Use commands `list' or `binary' to work with generated FASTQ files. There are no input files for `simulate' command. By default, a sequence data would be written to STDOUT if --nf option is given with 1 or a single sequence file is requested. Use option --outfile or --nf with 2 or greater to write to files. Use --kmer to specifiy the length of kmer sequences, and set the number of kmers using --maxkmer. Change the length of sequences using option --seqlen.

The command can create FASTQ files with errors by using option --error-rate. If the argument of option --error-rate is positive between 1 and 100, options --error-iteration, and --error-initial specifies the number of sets of random sequences. A set of random sequences contains --maxkmer kmers. Use --error-duplicate to increase occurrences of some kmers. Options --error-initial, --error-iteration, --error-duplicate take effect only if option --error-rate is given with an argument of positive number.

The command `simulate' can only create a small-size data set because it would take too much time to generate a large data set. You could bump up a file using the following commands:

$ for i in {1..10}; do echo outfile-00.fq; done | xargs cat > outfile.fq

Although I have not tested options for creating .par files. You could turn on --with-parfile option to create partition files. Total number of parition files with .par extension is equal to ni x np where ni is given by option --ni and --np. This may not work because I have not tested it much.

To generate a sequence file using `simulate' command, type in:
$ simulate
The command runs with default options. See the secion `simulate' command above for detail or type in:
$ simulate -h
to learn options and default values of the command. The `simulate' command would create a sequence file.

$ simulate --kmer=5 --maxkmer=30 --error-rate=1 --seqlen=100 --seed=1 --error-iteration=5 --error-initial=30 --error-duplicate=2

*** BINARY ***

To create a binary file from a set of FASTQ files, type in:
$ simulate -k 25 --maxkmer=1000000 --nf=10 --progress
$ binary *.fq

*** UNCOMPRESS ***

To see the content of a binary file, type in:
$ uncompress outfile.bin

*** PARTITION ***

Let us recover the same partition file, which is a part of command `count' using command `partition'.
$ partition -k 25 outfile.bin
Because this command is part of simulation, it uses more options in command `simulate' than those in `count'. The command would create a partition file: outfile-0-0.par. The partition file contains kmers in bytes, which can be decoded by using command `decode' or `kmer' with the partition file.

*** DECODE/KMER ***

To convert a partition file to a text file, type in:
$ kmer -k 25 outfile-0-0.par
The `decode' command generates kmers in STDOUT.

*** TABLE ***

To create the report file from a partition file, type in:
$ table -k 25 outfile-0-0.par
This would create an output file named outfile.tbl. To display th content of the table file, type in:
$ dump outfile.tbl

*** LIST ***

To list kmers in a FASTQ file, type in:
$ list -k 25 outfile-0-0.fq

*** MATCH ***

To compare a table and a set of sequence files, type in:
$ match --tabfile=outfile.tbl outfile-0-0.fq

*** INSPECT ***

To inspect your computer, type in:
$ inspect

*** QUERY ***

!!! NOT WORKING YET !!!
$ query

*** ASSESS ***

This command compares an exactly counted table with an approximately counted one, and assesses errors and accuracy of the approximately counted table. Use option --tabfile with an exactly counted table file name. The input file is an approximately counted table. For each kmer in an exactly counted table, first check if the count value is greater than a given minimum value. If so, I compute (x - y)/x where x is the exact count, and y is the approximately counted value. I also increment the total number of kmers whose exact count is greater than a given minimum value. I choose a range of minimum values. A desirable tendency would be that errors decrease as the given minimum value increases.

*** EXAMPLES ***

Let's consider these variables in testing.
K: kmer size
N: number of unique kmers (MAX of N=10^8)
F: occurence of each unique kmer
T: number of threads
D: disk space
M: memory required

1. Simple test

2. Count command test (.fa/.fq -> .tbl)
K=15..200,T=1,N=1000,F=65535,D=100,M=10
for K in {15..200}; do ./count $K 1000 65535 fq no 100 10 1; done
K=15..200,T=2
for K in {15..200}; do ./count $K 1000 65535 fq no 100 10 2; done
K=15..200,T=4
for K in {15..200}; do ./count $K 1000 65535 fq no 100 10 4; done

*** FEATURES ****

alder-kmer can:

deal with input sequence files including FASTA and FASTQ files whether they are compressed with gzip or not,

handle multiple sequence files as in typical unix command,

count kmers using dsk-mode or topkmer-mode,

set the minimum or maximum values of counts,

provide frequency of counts,

. Test of overflow of occurence (create a separate file of kmer of overflowed).
.ofl file would contain encoded numbers just like .par file.


### End of Examples ###"
option "examples" - "Shows example runs of alder-kmer" flag off

section "document"
sectiondesc="Title

Abstract
Counting K-mers in a nucleotide sequence data set is a basic step in further analyses of the data. Computing environments can be diverse from personal computers to high-end super computers. Diverse computing environments are equiped with different limiting factors in terms of disk space, available memory, and CPUs. Computing costs time and enerage. Efficient use of available resources is important. I could have saved time and spend the spare time on something else. Someone else could have used the resources for their use. If disk space is cheaper than memory in computing environments such as personal computers, using disk space would be beneficial. Disk space may not be available in some high-end super computing environments, but more computer memory could be available. I experiment with counting K-mers in different computing environments to address which resources are limiting factors.

Introduction




Limited factors.
1. Disk space. Usually disk space is unlimited. In high-end computing facilities, disk space tends to be more expensive than memory or available CPUs. Reading and writing compressed files can be crucial in this disk space limited computing environment.
2. Memory. Loading all of the sequence data in a single memory would allow me to bypass the generation of partition files, and directly create a resulting table file.
3. CPU cores. I cannot compensate limited memory by multiple CPUs.

Limted disk

Input data - 460g (uncompressed) 130g (gz compressed) 100g (bz2 compressed) 130g (lz4 compressed)
disk space - 100m, 1g, 10g, 100g, 1000g
memory     - 100m, 1g, 2g, 4g, 8g, 16g, 32g, 64g, (128g, 256g, 512g, 1024g, 2048g)
CPU        - 1, 2, 4, 8, 24, 16, 32, 64, 128
K          - 1 ... 256

Phases (compress, partition, table)
1. compress  - sequence data to a binary file
2. partition - a binary file to multiple partition files
3. table     - partition files to a table file

1. A single iteration - partition and table
2. large memory - compress and table

If the available memory is large enough to load a whole data set, I could bypass the partition step and write the table directly.

I would avoid comparing alder-kmer with dsk or kmc because they are similar in many ways. Besides, they are not as popular as Jellyfish. The CAS is a key difference from dsk or kmc. I want to make a case that CAS with dsk or kmc scheme would improve the disk-streaming kmer counting method in the computing speed.

Differences from Jellyfish, dsk, kmc
1. Jellyfish - a table is made per partition
2. dsk - uses lock-free scheme or Jellyfish approach if more memory is available
3. kmc - uses lock-free scheme

Commons with Jellyfish, dsk, kmc
1. Jellyfish - using CAS
2. dsk - same when the memory is limited
3. kmc - delicate multi-threaded design

Methods

Results

Discussions

References


Jellyfish

Marçais, G. & Kingsford, C. A fast, lock-free approach for efficient parallel counting of occurrences of k-mers. Bioinformatics, Department of Computer Science, University of Maryland, College Park, MD 20742, USA. gmarcais@umd.edu, 2011, 27, 764-770

dsk (minia)

Rizk, G.; Lavenier, D. & Chikhi, R. DSK: k-mer counting with very low memory usage. Bioinformatics, Algorizk, 75013 Paris, France., 2013, 29, 652-653

kmc

Deorowicz, S.; Debudaj-Grabysz, A. & Grabowski, S. Disk-based k-mer counting on a PC. BMC Bioinformatics, Institute of Informatics, Silesian University of Technology, Akademicka 16, 44-100 Gliwice, Poland. sebastian.deorowicz@polsl.pl, 2013, 14, 160

BFCounter

Melsted, Pá. & Pritchard, J. K. Efficient counting of k-mers in DNA sequences using a bloom filter. BMC Bioinformatics, Department of Human Genetics, The University of Chicago, Chicago, IL 60637, USA. pmelsted@gmail.com, 2011, 12, 333

khmer

Pell, J.; Hintze, A.; Canino-Koning, R.; Howe, A.; Tiedje, J. M. & Brown, C. T. Scaling metagenome sequence assembly with probabilistic de Bruijn graphs Proceedings of the National Academy of Sciences, National Acad Sciences, 2012, 109, 13272-13277
https://github.com/ctb/khmer

de Bruijn graphs

Compeau, P. E.; Pevzner, P. A. & Tesler, G. How to apply de Bruijn graphs to genome assembly Nature biotechnology, Nature Publishing Group, 2011, 29, 987-991

### End of Document ###"
option "document" - "Shows the document for alder-kmer" flag off

