/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MY_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define MY_CMDLINE_PARSER_PACKAGE "alder-kmer"
#endif

#ifndef MY_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define MY_CMDLINE_PARSER_PACKAGE_NAME "alder-kmer"
#endif

#ifndef MY_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define MY_CMDLINE_PARSER_VERSION "0.1"
#endif

enum enum_format { format__NULL = -1, format_arg_fasta = 0, format_arg_fastq, format_arg_fa, format_arg_fq, format_arg_seq, format_arg_kmc, format_arg_tbl, format_arg_tbh, format_arg_par, format_arg_bin };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *version_help; /**< @brief Print version and exit help description.  */
  int help_flag;	/**< @brief Print help of the program, or a command: e.g., alder-kmer count -h (default=off).  */
  const char *help_help; /**< @brief Print help of the program, or a command: e.g., alder-kmer count -h help description.  */
  int detailed_help_flag;	/**< @brief Print help, including all details (default=off).  */
  const char *detailed_help_help; /**< @brief Print help, including all details help description.  */
  int full_help_flag;	/**< @brief Print help with documents (default=off).  */
  const char *full_help_help; /**< @brief Print help with documents help description.  */
  int count_flag;	/**< @brief Count k-mer data (default=off).  */
  const char *count_help; /**< @brief Count k-mer data help description.  */
  long kmer_arg;	/**< @brief k-mer size (same: -m/--mer-len) (default='1').  */
  char * kmer_orig;	/**< @brief k-mer size (same: -m/--mer-len) original value given at command line.  */
  const char *kmer_help; /**< @brief k-mer size (same: -m/--mer-len) help description.  */
  long disk_arg;	/**< @brief maximum disk space (default='10').  */
  char * disk_orig;	/**< @brief maximum disk space original value given at command line.  */
  const char *disk_help; /**< @brief maximum disk space help description.  */
  double load_disk_arg;	/**< @brief fraction of disk (default='1.0').  */
  char * load_disk_orig;	/**< @brief fraction of disk original value given at command line.  */
  const char *load_disk_help; /**< @brief fraction of disk help description.  */
  long memory_arg;	/**< @brief maximum memory (default='10').  */
  char * memory_orig;	/**< @brief maximum memory original value given at command line.  */
  const char *memory_help; /**< @brief maximum memory help description.  */
  double load_memory_arg;	/**< @brief fraction of memory (default='1.0').  */
  char * load_memory_orig;	/**< @brief fraction of memory original value given at command line.  */
  const char *load_memory_help; /**< @brief fraction of memory help description.  */
  long nthread_arg;	/**< @brief number of threads (default='1').  */
  char * nthread_orig;	/**< @brief number of threads original value given at command line.  */
  const char *nthread_help; /**< @brief number of threads help description.  */
  char * outfile_arg;	/**< @brief prefix of output files (default='outfile').  */
  char * outfile_orig;	/**< @brief prefix of output files original value given at command line.  */
  const char *outfile_help; /**< @brief prefix of output files help description.  */
  char * outdir_arg;	/**< @brief output directory (default='.').  */
  char * outdir_orig;	/**< @brief output directory original value given at command line.  */
  const char *outdir_help; /**< @brief output directory help description.  */
  long nh_arg;	/**< @brief number of hash elements (default='0').  */
  char * nh_orig;	/**< @brief number of hash elements original value given at command line.  */
  const char *nh_help; /**< @brief number of hash elements help description.  */
  int no_partition_flag;	/**< @brief Skip partitioning sequence files. (default=off).  */
  const char *no_partition_help; /**< @brief Skip partitioning sequence files. help description.  */
  int no_count_flag;	/**< @brief Skip counting. (default=off).  */
  const char *no_count_help; /**< @brief Skip counting. help description.  */
  int no_delete_flag;	/**< @brief Do not delete partition files; on with --no-count (default=off).  */
  const char *no_delete_help; /**< @brief Do not delete partition files; on with --no-count help description.  */
  int report_flag;	/**< @brief Report the count table (default=off).  */
  const char *report_help; /**< @brief Report the count table help description.  */
  int summary_flag;	/**< @brief Display only summary of the table (default=off).  */
  const char *summary_help; /**< @brief Display only summary of the table help description.  */
  int fasta_flag;	/**< @brief in fasta format (default=off).  */
  const char *fasta_help; /**< @brief in fasta format help description.  */
  int no_tab_flag;	/**< @brief Space separator (default=off).  */
  const char *no_tab_help; /**< @brief Space separator help description.  */
  int query_flag;	/**< @brief dummy (default=off).  */
  const char *query_help; /**< @brief dummy help description.  */
  char * sequence_arg;	/**< @brief Query a kmer DNA sequence.  */
  char * sequence_orig;	/**< @brief Query a kmer DNA sequence original value given at command line.  */
  const char *sequence_help; /**< @brief Query a kmer DNA sequence help description.  */
  int simulate_flag;	/**< @brief Simulate k-mer data (default=off).  */
  const char *simulate_help; /**< @brief Simulate k-mer data help description.  */
  long maxkmer_arg;	/**< @brief number of kmers in a file (default='1000').  */
  char * maxkmer_orig;	/**< @brief number of kmers in a file original value given at command line.  */
  const char *maxkmer_help; /**< @brief number of kmers in a file help description.  */
  enum enum_format format_arg;	/**< @brief file format (default='fastq').  */
  char * format_orig;	/**< @brief file format original value given at command line.  */
  const char *format_help; /**< @brief file format help description.  */
  long ni_arg;	/**< @brief number of iterations (default='1').  */
  char * ni_orig;	/**< @brief number of iterations original value given at command line.  */
  const char *ni_help; /**< @brief number of iterations help description.  */
  long np_arg;	/**< @brief number of partitions (default='1').  */
  char * np_orig;	/**< @brief number of partitions original value given at command line.  */
  const char *np_help; /**< @brief number of partitions help description.  */
  long nf_arg;	/**< @brief number of sequences files (default='1').  */
  char * nf_orig;	/**< @brief number of sequences files original value given at command line.  */
  const char *nf_help; /**< @brief number of sequences files help description.  */
  long seqlen_arg;	/**< @brief maximum sequence length (default='100').  */
  char * seqlen_orig;	/**< @brief maximum sequence length original value given at command line.  */
  const char *seqlen_help; /**< @brief maximum sequence length help description.  */
  long seed_arg;	/**< @brief random seed (default='-1').  */
  char * seed_orig;	/**< @brief random seed original value given at command line.  */
  const char *seed_help; /**< @brief random seed help description.  */
  int partition_flag;	/**< @brief Create a partition file (default=off).  */
  const char *partition_help; /**< @brief Create a partition file help description.  */
  long inbuffer_arg;	/**< @brief Size of input buffer in log2 (default='0').  */
  char * inbuffer_orig;	/**< @brief Size of input buffer in log2 original value given at command line.  */
  const char *inbuffer_help; /**< @brief Size of input buffer in log2 help description.  */
  long outbuffer_arg;	/**< @brief Size of output buffer in log2 (default='0').  */
  char * outbuffer_orig;	/**< @brief Size of output buffer in log2 original value given at command line.  */
  const char *outbuffer_help; /**< @brief Size of output buffer in log2 help description.  */
  int decode_flag;	/**< @brief Decode a partition file (default=off).  */
  const char *decode_help; /**< @brief Decode a partition file help description.  */
  int table_flag;	/**< @brief Partition file (default=off).  */
  const char *table_help; /**< @brief Partition file help description.  */
  int list_flag;	/**< @brief List kmers in a text file. Options: kmer, seqlen (default=off).  */
  const char *list_help; /**< @brief List kmers in a text file. Options: kmer, seqlen help description.  */
  int match_flag;	/**< @brief Compare a table file and input sequence data. (default=off).  */
  const char *match_help; /**< @brief Compare a table file and input sequence data. help description.  */
  char * tabfile_arg;	/**< @brief a table file name (default='outfile').  */
  char * tabfile_orig;	/**< @brief a table file name original value given at command line.  */
  const char *tabfile_help; /**< @brief a table file name help description.  */
  int binary_flag;	/**< @brief Create a binary file from sequence file. (default=off).  */
  const char *binary_help; /**< @brief Create a binary file from sequence file. help description.  */
  int uncompress_flag;	/**< @brief Create a simple form of a sequence file from an alder-kmer binary file. (default=off).  */
  const char *uncompress_help; /**< @brief Create a simple form of a sequence file from an alder-kmer binary file. help description.  */
  int inspect_flag;	/**< @brief inspect command (default=off).  */
  const char *inspect_help; /**< @brief inspect command help description.  */
  const char *cite_help; /**< @brief Print reference papers help description.  */
  char * log_arg;	/**< @brief Log file using option outfile (default='outfile.log').  */
  char * log_orig;	/**< @brief Log file using option outfile original value given at command line.  */
  const char *log_help; /**< @brief Log file using option outfile help description.  */
  int progress_flag;	/**< @brief Display progress (default=off).  */
  const char *progress_help; /**< @brief Display progress help description.  */
  long loglevel_arg;	/**< @brief Log level (default='1').  */
  char * loglevel_orig;	/**< @brief Log level original value given at command line.  */
  const char *loglevel_help; /**< @brief Log level help description.  */
  int progress_to_stderr_flag;	/**< @brief Display progress number to stdandard error (default=off).  */
  const char *progress_to_stderr_help; /**< @brief Display progress number to stdandard error help description.  */
  long totalmaxkmer_arg;	/**< @brief Skip counting maximum number of kmers in data, and use this number (default='0').  */
  char * totalmaxkmer_orig;	/**< @brief Skip counting maximum number of kmers in data, and use this number original value given at command line.  */
  const char *totalmaxkmer_help; /**< @brief Skip counting maximum number of kmers in data, and use this number help description.  */
  long select_version_arg;	/**< @brief Select a version of kmer counting: 0 for automatic selction, 1 for skipping binary file creation (dsk mode with a single iteration), 2 for binary file creation (dsk mode), 3 for loading a whole input data on the memory (msk or memory streaming kmer mode), 4 for splitting a binary file, 5 for distributed reading, 7 for sequential read with CAS encoding, and 8 for space saving algorithm. (default='8').  */
  char * select_version_orig;	/**< @brief Select a version of kmer counting: 0 for automatic selction, 1 for skipping binary file creation (dsk mode with a single iteration), 2 for binary file creation (dsk mode), 3 for loading a whole input data on the memory (msk or memory streaming kmer mode), 4 for splitting a binary file, 5 for distributed reading, 7 for sequential read with CAS encoding, and 8 for space saving algorithm. original value given at command line.  */
  const char *select_version_help; /**< @brief Select a version of kmer counting: 0 for automatic selction, 1 for skipping binary file creation (dsk mode with a single iteration), 2 for binary file creation (dsk mode), 3 for loading a whole input data on the memory (msk or memory streaming kmer mode), 4 for splitting a binary file, 5 for distributed reading, 7 for sequential read with CAS encoding, and 8 for space saving algorithm. help description.  */
  char * bin_outdir_arg;	/**< @brief binary file output directory (default='.').  */
  char * bin_outdir_orig;	/**< @brief binary file output directory original value given at command line.  */
  const char *bin_outdir_help; /**< @brief binary file output directory help description.  */
  char * par_outdir_arg;	/**< @brief partition files output directory (default='.').  */
  char * par_outdir_orig;	/**< @brief partition files output directory original value given at command line.  */
  const char *par_outdir_help; /**< @brief partition files output directory help description.  */
  char * tab_outdir_arg;	/**< @brief table file output directory (default='.').  */
  char * tab_outdir_orig;	/**< @brief table file output directory original value given at command line.  */
  const char *tab_outdir_help; /**< @brief table file output directory help description.  */
  long mer_len_arg;	/**< @brief k-mer size (default='1').  */
  char * mer_len_orig;	/**< @brief k-mer size original value given at command line.  */
  const char *mer_len_help; /**< @brief k-mer size help description.  */
  int canonical_flag;	/**< @brief Count both strand (default=off).  */
  const char *canonical_help; /**< @brief Count both strand help description.  */
  long lower_count_arg;	/**< @brief minimum count (default='1').  */
  char * lower_count_orig;	/**< @brief minimum count original value given at command line.  */
  const char *lower_count_help; /**< @brief minimum count help description.  */
  long upper_count_arg;	/**< @brief maximum count (default='65535').  */
  char * upper_count_orig;	/**< @brief maximum count original value given at command line.  */
  const char *upper_count_help; /**< @brief maximum count help description.  */
  long size_arg;	/**< @brief hash size (default='1').  */
  char * size_orig;	/**< @brief hash size original value given at command line.  */
  const char *size_help; /**< @brief hash size help description.  */
  long threads_arg;	/**< @brief number of threads (default='1').  */
  char * threads_orig;	/**< @brief number of threads original value given at command line.  */
  const char *threads_help; /**< @brief number of threads help description.  */
  char * output_arg;	/**< @brief prefix of output files (default='outfile').  */
  char * output_orig;	/**< @brief prefix of output files original value given at command line.  */
  const char *output_help; /**< @brief prefix of output files help description.  */
  int with_reverse_flag;	/**< @brief Print reverse complementary sequences (default=off).  */
  const char *with_reverse_help; /**< @brief Print reverse complementary sequences help description.  */
  int with_index_flag;	/**< @brief Print index values (default=off).  */
  const char *with_index_help; /**< @brief Print index values help description.  */
  int only_init_flag;	/**< @brief Do not execute counting, but the initialization (default=off).  */
  const char *only_init_help; /**< @brief Do not execute counting, but the initialization help description.  */
  int with_parfile_flag;	/**< @brief Create par files as well as sequence files. (default=off).  */
  const char *with_parfile_help; /**< @brief Create par files as well as sequence files. help description.  */
  long min_table_memory_arg;	/**< @brief min memory of a part table (default='100').  */
  char * min_table_memory_orig;	/**< @brief min memory of a part table original value given at command line.  */
  const char *min_table_memory_help; /**< @brief min memory of a part table help description.  */
  long max_table_memory_arg;	/**< @brief max memory of a part table (default='1000').  */
  char * max_table_memory_orig;	/**< @brief max memory of a part table original value given at command line.  */
  const char *max_table_memory_help; /**< @brief max memory of a part table help description.  */
  long nsplit_arg;	/**< @brief split binary files (default='1').  */
  char * nsplit_orig;	/**< @brief split binary files original value given at command line.  */
  const char *nsplit_help; /**< @brief split binary files help description.  */
  int use_seqfile_flag;	/**< @brief Use FASTQ or FASTA (default=off).  */
  const char *use_seqfile_help; /**< @brief Use FASTQ or FASTA help description.  */
  char * binfile_arg;	/**< @brief prefix of binary files (default='outfile').  */
  char * binfile_orig;	/**< @brief prefix of binary files original value given at command line.  */
  const char *binfile_help; /**< @brief prefix of binary files help description.  */
  char * parfile_arg;	/**< @brief prefix of partition files (default='outfile').  */
  char * parfile_orig;	/**< @brief prefix of partition files original value given at command line.  */
  const char *parfile_help; /**< @brief prefix of partition files help description.  */
  long error_initial_arg;	/**< @brief number of initial random sets (default='1').  */
  char * error_initial_orig;	/**< @brief number of initial random sets original value given at command line.  */
  const char *error_initial_help; /**< @brief number of initial random sets help description.  */
  long error_rate_arg;	/**< @brief error rate in per cent (default='0').  */
  char * error_rate_orig;	/**< @brief error rate in per cent original value given at command line.  */
  const char *error_rate_help; /**< @brief error rate in per cent help description.  */
  long error_iteration_arg;	/**< @brief number of sets with errors (default='1').  */
  char * error_iteration_orig;	/**< @brief number of sets with errors original value given at command line.  */
  const char *error_iteration_help; /**< @brief number of sets with errors help description.  */
  long error_duplicate_arg;	/**< @brief max number of sets with the same errors (default='1').  */
  char * error_duplicate_orig;	/**< @brief max number of sets with the same errors original value given at command line.  */
  const char *error_duplicate_help; /**< @brief max number of sets with the same errors help description.  */
  int dsk_flag;	/**< @brief Turn on DSK mode (default=off).  */
  const char *dsk_help; /**< @brief Turn on DSK mode help description.  */
  int assess_flag;	/**< @brief assess command (default=off).  */
  const char *assess_help; /**< @brief assess command help description.  */
  int save_all_flag;	/**< @brief Save deleted keys (default=off).  */
  const char *save_all_help; /**< @brief Save deleted keys help description.  */
  int view_flag;	/**< @brief view command (default=off).  */
  const char *view_help; /**< @brief view command help description.  */
  int fastq_flag;	/**< @brief in fastq format (default=off).  */
  const char *fastq_help; /**< @brief in fastq format help description.  */
  int release_flag;	/**< @brief Release mode (default=on).  */
  const char *release_help; /**< @brief Release mode help description.  */
  int exit_flag;	/**< @brief dummy (default=off).  */
  const char *exit_help; /**< @brief dummy help description.  */
  int examples_flag;	/**< @brief Shows example runs of alder-kmer (default=off).  */
  const char *examples_help; /**< @brief Shows example runs of alder-kmer help description.  */
  int document_flag;	/**< @brief Shows the document for alder-kmer (default=off).  */
  const char *document_help; /**< @brief Shows the document for alder-kmer help description.  */
  
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int count_given ;	/**< @brief Whether count was given.  */
  unsigned int kmer_given ;	/**< @brief Whether kmer was given.  */
  unsigned int disk_given ;	/**< @brief Whether disk was given.  */
  unsigned int load_disk_given ;	/**< @brief Whether load-disk was given.  */
  unsigned int memory_given ;	/**< @brief Whether memory was given.  */
  unsigned int load_memory_given ;	/**< @brief Whether load-memory was given.  */
  unsigned int nthread_given ;	/**< @brief Whether nthread was given.  */
  unsigned int outfile_given ;	/**< @brief Whether outfile was given.  */
  unsigned int outdir_given ;	/**< @brief Whether outdir was given.  */
  unsigned int nh_given ;	/**< @brief Whether nh was given.  */
  unsigned int no_partition_given ;	/**< @brief Whether no-partition was given.  */
  unsigned int no_count_given ;	/**< @brief Whether no-count was given.  */
  unsigned int no_delete_given ;	/**< @brief Whether no-delete was given.  */
  unsigned int report_given ;	/**< @brief Whether report was given.  */
  unsigned int summary_given ;	/**< @brief Whether summary was given.  */
  unsigned int fasta_given ;	/**< @brief Whether fasta was given.  */
  unsigned int no_tab_given ;	/**< @brief Whether no-tab was given.  */
  unsigned int query_given ;	/**< @brief Whether query was given.  */
  unsigned int sequence_given ;	/**< @brief Whether sequence was given.  */
  unsigned int simulate_given ;	/**< @brief Whether simulate was given.  */
  unsigned int maxkmer_given ;	/**< @brief Whether maxkmer was given.  */
  unsigned int format_given ;	/**< @brief Whether format was given.  */
  unsigned int ni_given ;	/**< @brief Whether ni was given.  */
  unsigned int np_given ;	/**< @brief Whether np was given.  */
  unsigned int nf_given ;	/**< @brief Whether nf was given.  */
  unsigned int seqlen_given ;	/**< @brief Whether seqlen was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int partition_given ;	/**< @brief Whether partition was given.  */
  unsigned int inbuffer_given ;	/**< @brief Whether inbuffer was given.  */
  unsigned int outbuffer_given ;	/**< @brief Whether outbuffer was given.  */
  unsigned int decode_given ;	/**< @brief Whether decode was given.  */
  unsigned int table_given ;	/**< @brief Whether table was given.  */
  unsigned int list_given ;	/**< @brief Whether list was given.  */
  unsigned int match_given ;	/**< @brief Whether match was given.  */
  unsigned int tabfile_given ;	/**< @brief Whether tabfile was given.  */
  unsigned int binary_given ;	/**< @brief Whether binary was given.  */
  unsigned int uncompress_given ;	/**< @brief Whether uncompress was given.  */
  unsigned int inspect_given ;	/**< @brief Whether inspect was given.  */
  unsigned int cite_given ;	/**< @brief Whether cite was given.  */
  unsigned int log_given ;	/**< @brief Whether log was given.  */
  unsigned int progress_given ;	/**< @brief Whether progress was given.  */
  unsigned int loglevel_given ;	/**< @brief Whether loglevel was given.  */
  unsigned int progress_to_stderr_given ;	/**< @brief Whether progress-to-stderr was given.  */
  unsigned int totalmaxkmer_given ;	/**< @brief Whether totalmaxkmer was given.  */
  unsigned int select_version_given ;	/**< @brief Whether select-version was given.  */
  unsigned int bin_outdir_given ;	/**< @brief Whether bin-outdir was given.  */
  unsigned int par_outdir_given ;	/**< @brief Whether par-outdir was given.  */
  unsigned int tab_outdir_given ;	/**< @brief Whether tab-outdir was given.  */
  unsigned int mer_len_given ;	/**< @brief Whether mer-len was given.  */
  unsigned int canonical_given ;	/**< @brief Whether canonical was given.  */
  unsigned int lower_count_given ;	/**< @brief Whether lower-count was given.  */
  unsigned int upper_count_given ;	/**< @brief Whether upper-count was given.  */
  unsigned int size_given ;	/**< @brief Whether size was given.  */
  unsigned int threads_given ;	/**< @brief Whether threads was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int with_reverse_given ;	/**< @brief Whether with-reverse was given.  */
  unsigned int with_index_given ;	/**< @brief Whether with-index was given.  */
  unsigned int only_init_given ;	/**< @brief Whether only-init was given.  */
  unsigned int with_parfile_given ;	/**< @brief Whether with-parfile was given.  */
  unsigned int min_table_memory_given ;	/**< @brief Whether min-table-memory was given.  */
  unsigned int max_table_memory_given ;	/**< @brief Whether max-table-memory was given.  */
  unsigned int nsplit_given ;	/**< @brief Whether nsplit was given.  */
  unsigned int use_seqfile_given ;	/**< @brief Whether use-seqfile was given.  */
  unsigned int binfile_given ;	/**< @brief Whether binfile was given.  */
  unsigned int parfile_given ;	/**< @brief Whether parfile was given.  */
  unsigned int error_initial_given ;	/**< @brief Whether error-initial was given.  */
  unsigned int error_rate_given ;	/**< @brief Whether error-rate was given.  */
  unsigned int error_iteration_given ;	/**< @brief Whether error-iteration was given.  */
  unsigned int error_duplicate_given ;	/**< @brief Whether error-duplicate was given.  */
  unsigned int dsk_given ;	/**< @brief Whether dsk was given.  */
  unsigned int assess_given ;	/**< @brief Whether assess was given.  */
  unsigned int save_all_given ;	/**< @brief Whether save-all was given.  */
  unsigned int view_given ;	/**< @brief Whether view was given.  */
  unsigned int fastq_given ;	/**< @brief Whether fastq was given.  */
  unsigned int release_given ;	/**< @brief Whether release was given.  */
  unsigned int exit_given ;	/**< @brief Whether exit was given.  */
  unsigned int examples_given ;	/**< @brief Whether examples was given.  */
  unsigned int document_given ;	/**< @brief Whether document was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct my_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *gengetopt_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int my_cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use my_cmdline_parser_ext() instead
 */
int my_cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int my_cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct my_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int my_cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int my_cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void my_cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void my_cmdline_parser_print_full_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void my_cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void my_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a my_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void my_cmdline_parser_params_init(struct my_cmdline_parser_params *params);

/**
 * Allocates dynamically a my_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized my_cmdline_parser_params structure
 */
struct my_cmdline_parser_params *my_cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void my_cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void my_cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int my_cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *my_cmdline_parser_format_values[];  /**< @brief Possible values for format. */
extern const char *my_cmdline_parser_loglevel_values[];  /**< @brief Possible values for loglevel. */
extern const char *my_cmdline_parser_select_version_values[];  /**< @brief Possible values for select-version. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
